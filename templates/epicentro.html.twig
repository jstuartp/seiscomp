{% extends '/base.html.twig' %}

{% block body %}

    <script >
        let ciudades =[];

        document.addEventListener("DOMContentLoaded", function() {
            {% for ciudadp in ciudadesp %}
            ciudades.push({nombre: '{{ ciudadp.nombre }}',lat: '{{ ciudadp.lat }}',lon: '{{ ciudadp.lon }}' });

            {% endfor %}
            //alert(ciudades.nombre);
            //cambio

        });

        function calcularCiudadesCercanas() {
            const R = 6371; // Radio de la Tierra en km
            const latReferencia ={{ lat }};
            const lonReferencia ={{ long }};

            // Función interna para calcular la distancia con la fórmula de Haversine
            function calcularDistancia(lat1, lon1, lat2, lon2) {
                //alert(lat1+";"+lon1+";"+lat2+";"+lon2);
                const rad = Math.PI / 180;
                const dLat = (lat2 - lat1) * rad;
                const dLon = (lon2 - lon1) * rad;
                const a = Math.sin(dLat / 2) ** 2 +
                    Math.cos(lat1 * rad) * Math.cos(lat2 * rad) *
                    Math.sin(dLon / 2) ** 2;
                const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                return R * c;
            }

            // Mapear ciudades con su distancia al punto de referencia
            const ciudadesConDistancia = ciudades.map(ciudad => {
                const distancia = calcularDistancia(
                    latReferencia, lonReferencia,
                    ciudad.lat, ciudad.lon
                );
                return { ...ciudad, distancia };
            });
            // Ordenar por distancia ascendente
            ciudadesConDistancia.sort((a, b) => a.distancia - b.distancia);

            // Retornar las 20 más cercanas
            return ciudadesConDistancia.slice(0, 20);
        }


        </script>

    <div class="container-fluid" xmlns="http://www.w3.org/1999/html">



        <div class="row">
            <br><br><br>
            <div class="col">

            </div>
        </div>
        <div class="row">
            <div class="col-sm-8">
                <h2 class="mb-4">{% block page_title %}
                        Ciudades cercanas al sismo del  <strong>{{ fecha|date("d-m-Y H:i:s ") }} (UTC)  </strong>
                        <span class="badge bg-danger">M {{ magnitud |round(1)}} </span>{% endblock %}
                </h2>
            </div>
            <div class="col-sm-4 text-end">
                <a href="{{ path('homepage') }}" class="btn btn-dark">
                    Inicio
                </a>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-8">
                <h3 class="mb-4">
                    {{ epi }}
                </h3>
            </div>
        </div>
        <div class="row">
            <br>
            <div class="col">

            </div>
        </div>
        <div class="row h-100">

            <div class="col-12 col-md-4">
                <div class="row h-100">
                    <div class="bs-example" data-example-id="contextual-table">
                        <table class="table table-bordered table-hover table-condensed table-sm table-striped" id="tabla_epi" style="font-size: 12px !important;
                                                                                                                         height: 32px !important;
                                                                                                                        min-width: 100px !important;
                                                                                                                        padding: 2px 6px !important; ">
                            <caption>
                                Ciudades m&aacute;s Cercanas al Epicentro
                            </caption>
                            <thead>
                            <tr>
                                <th>#</th>
                                <th>Ciudad</th>
                                <th>Distancia (km)</th>
                            </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="col-12 col-md-8 d-none d-md-block">
                <div class="row h-100">
                    <div id="map">MAPA</div>
                </div>
            </div>
        </div>
        <div id="hidden_form_container" style="display:none;"></div>

        <div class="row">

            <br><br><br><br><br><br><br><br><br>
            <div class="col">

            </div>
        </div>

    </div>

    <div class="row">
        <div class="col">

        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function() {


            let cercanas = calcularCiudadesCercanas();

            // Cargar en la tabla
            const tablaBody = document.querySelector("#tabla_epi tbody");
            cercanas.forEach((ciudad, index) => {
                const fila = document.createElement("tr");
                fila.innerHTML = `
            <td>${index + 1}</td>
            <td>${ciudad.nombre}</td>
            <td>${ciudad.distancia.toFixed(2)}</td>
        `;
                tablaBody.appendChild(fila);
            });

            let mytabla =$('#tabla_epi').DataTable({
                responsive: true,
                paging: true,       // Habilita paginación
                ordering: true,
                order: [[2, "desc"],],
                lengthMenu: [15, 30, 60], // Opciones de cantidad de filas por página
                pageLength: 15,      // Número de filas por defecto
                language: {
                    processing: "En curso...",
                    search: "Buscar:",
                    paginate: {
                        first: "Primero",
                        previous: "Anterior",
                        next: "Siguiente",
                        last: "Último"
                    },
                },
            });

            const isDesktopUp = window.matchMedia('(min-width: 768px)').matches;

            if (isDesktopUp) {
// Inicializar el mapa centrado en una posición predeterminada
                var map = L.map('map').setView([0, 0], 6);
                let bounds = L.latLngBounds([7.886, -84.409],   // Suroeste (SW)
                    [11.019, -82.976])   // Noreste (NE)));
                map.fitBounds(bounds);

                // Agregar capa de mapa base
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; OpenStreetMap contributors',
                }).addTo(map);
                // Icono personalizado de estrella
                const starIcon = L.divIcon({
                    html: ' <img src="{{ asset('assets/imagenes/Estrella_roja.png') }}" alt="Estrella" style="width:50%;"> ',
                    className: '',
                    iconSize: [80, 80],
                    iconAnchor: [30, 30]
                });
                const cuadradoIcon = L.divIcon({
                    html: '<div style="width: 10px; height: 10px; background-color: blue; border: 2px solid black;"></div>',
                    className: '',  // eliminar clases por defecto
                    iconSize: [20, 20],
                    iconAnchor: [10, 10]  // centra el cuadrado en el punto
                });

                // Agregar el marcador con estrella
                L.marker([ {{ lat }}, {{ long }}], {icon: starIcon})
                    .addTo(map)
                    .bindPopup('Epicentro');
                let puntos_cercanos = calcularCiudadesCercanas();
                //alert(JSON.stringify(cercanas, null, 2));

                // Agregar marcadores al mapa
                puntos_cercanos.forEach(ciudad => {
                    L.marker([ciudad.lat, ciudad.lon], {icon: cuadradoIcon})
                        .addTo(map)
                        .bindPopup(`${ciudad.nombre}<br>Distancia: ${ciudad.distancia.toFixed(2)} km`);
                });

            }

            // Lista de puntos en formato Twig

        });
    </script>
    <script>

    </script>


{% endblock %}