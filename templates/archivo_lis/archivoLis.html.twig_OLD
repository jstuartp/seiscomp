{% extends '/base.html.twig' %}

{% block body %}
    <div class="container-fluid">
        <div class="row align-items-center mt-3">
            <div class="col-sm-8">
                <h2 class="mb-0">Generar archivos LIS</h2>
            </div>
            <div class="col-sm-4 text-end">
                <a href="{{ path('vista_lista_archivos') }}" class="btn btn-outline-secondary">Volver a la lista</a>
            </div>
        </div>

        <hr class="my-3">

        <div class="row g-3">

            <!-- Columna izquierda (ORIGEN) -->
            <div class="col-12 col-lg-5">
                <div class="card shadow-sm h-100">
                    <div class="card-header d-flex align-items-center justify-content-between">
                        <span class="fw-semibold">Estaciones disponibles</span>
                        <div class="form-check m-0">
                            <input class="form-check-input" type="checkbox" id="selectAllLeft">
                            <label class="form-check-label" for="selectAllLeft">Seleccionar todos</label>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row row-cols-2 row-cols-lg-3 g-2" id="grid-izquierda" style="max-height:60vh; overflow:auto;">
                            {# Renderice sus estaciones iniciales; ejemplo con "datos" #}
                            {% for dato in datos %}
                                <div class="col">
                                    <div class="card border-0 shadow-sm h-100">
                                        <div class="card-body p-2">
                                            <div class="form-check">
                                                <input class="form-check-input item-left"
                                                       type="checkbox"
                                                       id="left-{{ dato.estacion|e('html_attr') }}"
                                                       value="{{ dato.estacion }}"
                                                       data-estacion="{{ dato.estacion }}"
                                                       data-hne="{{ dato.hne|default(0)|round(2) }}"
                                                       data-hnn="{{ dato.hnn|default(0)|round(2) }}"
                                                       data-hnz="{{ dato.hnz|default(0)|round(2) }}"
                                                       data-maximo="{{ dato.maximo|default(0)|round(2) }}">
                                                <label class="form-check-label small" for="left-{{ dato.estacion|e('html_attr') }}">
                                                    <strong>{{ dato.estacion }}</strong><br>
                                                    <span class="text-muted">
                          HNE: {{ dato.hne|default(0)|round(2) }},
                          HNN: {{ dato.hnn|default(0)|round(2) }},
                          HNZ: {{ dato.hnz|default(0)|round(2) }}
                        </span><br>
                                                    <span class="text-muted">Máx: {{ dato.maximo|default(0)|round(2) }}</span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                    <div class="card-footer text-muted small">
                        Seleccione las estaciones y use “Añadir” para preparar la generación.
                    </div>
                </div>
            </div>

            <!-- Botones centrales -->
            <div class="col-12 col-lg-2 d-flex flex-column align-items-center justify-content-center gap-2">
                <button type="button" id="btnAdd" class="btn btn-primary w-100">Añadir →</button>
                <button type="button" id="btnRemove" class="btn btn-outline-danger w-100">← Quitar</button>

                <button type="button" id="btnGenerar" class="btn btn-success w-100" disabled>Generar</button>

                <!-- Loader + mensajes -->
                <div id="loader" class="d-none text-center mt-2">
                    <div class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></div>
                    <span class="small ms-2">generando…</span>
                </div>
                <div id="msgOk" class="text-success small d-none mt-2">Generación realizada con éxito</div>
                <div id="msgErr" class="text-danger small d-none mt-2">Ocurrió un error al generar</div>
            </div>

            <!-- Columna derecha (DESTINO) -->
            <div class="col-12 col-lg-5">
                <div class="card shadow-sm h-100">
                    <div class="card-header d-flex align-items-center justify-content-between">
                        <span class="fw-semibold">Estaciones a generar</span>
                        <div class="form-check m-0">
                            <input class="form-check-input" type="checkbox" id="selectAllRight">
                            <label class="form-check-label" for="selectAllRight">Seleccionar todos</label>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row row-cols-2 row-cols-lg-3 g-2" id="grid-derecha" style="max-height:60vh; overflow:auto;">
                            {# Se llena al “Añadir” #}
                        </div>
                    </div>
                    <div class="card-footer text-muted small">
                        Marque y use “Quitar” para devolver a la lista izquierda.
                    </div>
                </div>
            </div>

        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const gridLeft   = document.getElementById('grid-izquierda');
            const gridRight  = document.getElementById('grid-derecha');
            const selAllL    = document.getElementById('selectAllLeft');
            const selAllR    = document.getElementById('selectAllRight');
            const btnAdd     = document.getElementById('btnAdd');
            const btnRemove  = document.getElementById('btnRemove');
            const btnGen     = document.getElementById('btnGenerar');
            const loader     = document.getElementById('loader');
            const msgOk      = document.getElementById('msgOk');
            const msgErr     = document.getElementById('msgErr');

            const urlGenerar = "{{ path('accion_generar_archivos') }}";           // POST que ejecuta Python
            const urlLista   = "{{ path('vista_lista_archivos') }}";              // Redirección al finalizar

            function enableGen() {
                btnGen.disabled = (gridRight.querySelectorAll('.item-right').length === 0);
            }

            function dataFrom(chk) {
                return {
                    estacion: chk.dataset.estacion,
                    hne: chk.dataset.hne,
                    hnn: chk.dataset.hnn,
                    hnz: chk.dataset.hnz,
                    maximo: chk.dataset.maximo
                };
            }

            function esc(s){ return String(s).replaceAll('&','&amp;').replaceAll('<','&lt;').replaceAll('>','&gt;').replaceAll('"','&quot;').replaceAll("'","&#039;"); }
            function safeId(s){ return String(s).replace(/[^a-zA-Z0-9_-]/g, '_'); }

            function cardLeft(d) {
                const id = 'left-' + safeId(d.estacion);
                return `
      <div class="card border-0 shadow-sm h-100">
        <div class="card-body p-2">
          <div class="form-check">
            <input class="form-check-input item-left" type="checkbox"
                   id="${id}"
                   value="${esc(d.estacion)}"
                   data-estacion="${esc(d.estacion)}"
                   data-hne="${esc(d.hne ?? 0)}"
                   data-hnn="${esc(d.hnn ?? 0)}"
                   data-hnz="${esc(d.hnz ?? 0)}"
                   data-maximo="${esc(d.maximo ?? 0)}">
            <label class="form-check-label small" for="${id}">
              <strong>${esc(d.estacion)}</strong><br>
              <span class="text-muted">HNE: ${esc(d.hne ?? 0)}, HNN: ${esc(d.hnn ?? 0)}, HNZ: ${esc(d.hnz ?? 0)}</span><br>
              <span class="text-muted">Máx: ${esc(d.maximo ?? 0)}</span>
            </label>
          </div>
        </div>
      </div>`;
            }

            function cardRight(d) {
                const id = 'right-' + safeId(d.estacion);
                return `
      <div class="card border-0 shadow-sm h-100">
        <div class="card-body p-2">
          <div class="form-check">
            <input class="form-check-input item-right" type="checkbox"
                   id="${id}"
                   data-estacion="${esc(d.estacion)}"
                   data-hne="${esc(d.hne ?? 0)}"
                   data-hnn="${esc(d.hnn ?? 0)}"
                   data-hnz="${esc(d.hnz ?? 0)}"
                   data-maximo="${esc(d.maximo ?? 0)}">
            <label class="form-check-label small" for="${id}">
              <strong>${esc(d.estacion)}</strong><br>
              <span class="text-muted">HNE: ${esc(d.hne ?? 0)}, HNN: ${esc(d.hnn ?? 0)}, HNZ: ${esc(d.hnz ?? 0)}</span><br>
              <span class="text-muted">Máx: ${esc(d.maximo ?? 0)}</span>
            </label>
          </div>
        </div>
      </div>`;
            }

            function payloadRight() {
                return Array.from(gridRight.querySelectorAll('.item-right')).map(chk => dataFrom(chk));
            }

            selAllL?.addEventListener('change', e => {
                const on = e.target.checked;
                gridLeft.querySelectorAll('.item-left').forEach(chk => chk.checked = on);
            });

            selAllR?.addEventListener('change', e => {
                const on = e.target.checked;
                gridRight.querySelectorAll('.item-right').forEach(chk => chk.checked = on);
            });

            btnAdd.addEventListener('click', () => {
                const marcados = Array.from(gridLeft.querySelectorAll('.item-left:checked'));
                if (!marcados.length) return;
                marcados.forEach(chk => {
                    const d = dataFrom(chk);
                    const col = document.createElement('div');
                    col.className = 'col';
                    col.innerHTML = cardRight(d);
                    gridRight.appendChild(col);
                    chk.closest('.col')?.remove();
                });
                selAllL.checked = false;
                enableGen();
            });

            btnRemove.addEventListener('click', () => {
                const marcados = Array.from(gridRight.querySelectorAll('.item-right:checked'));
                if (!marcados.length) return;
                marcados.forEach(chk => {
                    const d = dataFrom(chk);
                    const col = document.createElement('div');
                    col.className = 'col';
                    col.innerHTML = cardLeft(d);
                    gridLeft.appendChild(col);
                    chk.closest('.col')?.remove();
                });
                selAllR.checked = false;
                enableGen();
            });

            btnGen.addEventListener('click', async () => {
                const items = payloadRight();
                if (!items.length) return;

                loader.classList.remove('d-none');
                msgOk.classList.add('d-none');
                msgErr.classList.add('d-none');
                btnGen.disabled = true;

                try {
                    const resp = await fetch(urlGenerar, {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({ items })
                    });
                    if (!resp.ok) throw new Error('HTTP ' + resp.status);

                    // Éxito → mensaje + redirección a la lista
                    msgOk.classList.remove('d-none');
                    setTimeout(() => { window.location.href = urlLista + '?ok=1'; }, 800);
                } catch (e) {
                    console.error(e);
                    msgErr.classList.remove('d-none');
                } finally {
                    loader.classList.add('d-none');
                }
            });

            enableGen();
        });
    </script>
{% endblock %}
